// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	chat "PetPalApp/features/chat"

	mock "github.com/stretchr/testify/mock"
)

// ChatModel is an autogenerated mock type for the ChatModel type
type ChatModel struct {
	mock.Mock
}

// CreateChat provides a mock function with given fields: _a0
func (_m *ChatModel) CreateChat(_a0 chat.ChatCore) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(chat.ChatCore) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: roomChatID, bubbleChatID, senderID
func (_m *ChatModel) Delete(roomChatID uint, bubbleChatID uint, senderID uint) error {
	ret := _m.Called(roomChatID, bubbleChatID, senderID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) error); ok {
		r0 = rf(roomChatID, bubbleChatID, senderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChatsDoctor provides a mock function with given fields: roomchatID
func (_m *ChatModel) GetChatsDoctor(roomchatID uint) ([]chat.ChatCore, error) {
	ret := _m.Called(roomchatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsDoctor")
	}

	var r0 []chat.ChatCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]chat.ChatCore, error)); ok {
		return rf(roomchatID)
	}
	if rf, ok := ret.Get(0).(func(uint) []chat.ChatCore); ok {
		r0 = rf(roomchatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chat.ChatCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(roomchatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatsUser provides a mock function with given fields: currentID, roomchatID
func (_m *ChatModel) GetChatsUser(currentID uint, roomchatID uint) ([]chat.ChatCore, error) {
	ret := _m.Called(currentID, roomchatID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsUser")
	}

	var r0 []chat.ChatCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) ([]chat.ChatCore, error)); ok {
		return rf(currentID, roomchatID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) []chat.ChatCore); ok {
		r0 = rf(currentID, roomchatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chat.ChatCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(currentID, roomchatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerAvailChat provides a mock function with given fields: roomChatID, bubbleChatID, senderID
func (_m *ChatModel) VerAvailChat(roomChatID uint, bubbleChatID uint, senderID uint) (*chat.ChatCore, error) {
	ret := _m.Called(roomChatID, bubbleChatID, senderID)

	if len(ret) == 0 {
		panic("no return value specified for VerAvailChat")
	}

	var r0 *chat.ChatCore
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) (*chat.ChatCore, error)); ok {
		return rf(roomChatID, bubbleChatID, senderID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint) *chat.ChatCore); ok {
		r0 = rf(roomChatID, bubbleChatID, senderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chat.ChatCore)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(roomChatID, bubbleChatID, senderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChatModel creates a new instance of ChatModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatModel {
	mock := &ChatModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
