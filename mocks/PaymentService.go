// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	payment "PetPalApp/features/payment"

	mock "github.com/stretchr/testify/mock"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: _a0
func (_m *PaymentService) CreatePayment(_a0 payment.Payment) (payment.Payment, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 payment.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(payment.Payment) (payment.Payment, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(payment.Payment) payment.Payment); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(payment.Payment)
	}

	if rf, ok := ret.Get(1).(func(payment.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: id
func (_m *PaymentService) GetOrderByID(id uint) (*payment.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *payment.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*payment.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *payment.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByID provides a mock function with given fields: id
func (_m *PaymentService) GetPaymentByID(id uint) (*payment.Payment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 *payment.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*payment.Payment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *payment.Payment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *PaymentService) GetUserByID(id uint) (*payment.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *payment.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*payment.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *payment.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
