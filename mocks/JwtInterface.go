// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// JwtInterface is an autogenerated mock type for the JwtInterface type
type JwtInterface struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: userId, role
func (_m *JwtInterface) CreateToken(userId int, role string) (string, error) {
	ret := _m.Called(userId, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (string, error)); ok {
		return rf(userId, role)
	}
	if rf, ok := ret.Get(0).(func(int, string) string); ok {
		r0 = rf(userId, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userId, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractTokenUserId provides a mock function with given fields: e
func (_m *JwtInterface) ExtractTokenUserId(e echo.Context) (int, string, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for ExtractTokenUserId")
	}

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context) (int, string, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) int); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(echo.Context) string); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(echo.Context) error); ok {
		r2 = rf(e)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JWTMiddleware provides a mock function with given fields:
func (_m *JwtInterface) JWTMiddleware() echo.MiddlewareFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JWTMiddleware")
	}

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func() echo.MiddlewareFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// NewJwtInterface creates a new instance of JwtInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtInterface {
	mock := &JwtInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
