// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	product "PetPalApp/features/product"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// Create provides a mock function with given fields: id, input, file, handlerFilename
func (_m *ProductService) Create(id uint, input product.Core, file io.Reader, handlerFilename string) (string, error) {
	ret := _m.Called(id, input, file, handlerFilename)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, product.Core, io.Reader, string) (string, error)); ok {
		return rf(id, input, file, handlerFilename)
	}
	if rf, ok := ret.Get(0).(func(uint, product.Core, io.Reader, string) string); ok {
		r0 = rf(id, input, file, handlerFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, product.Core, io.Reader, string) error); ok {
		r1 = rf(id, input, file, handlerFilename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id, userid
func (_m *ProductService) Delete(id uint, userid uint) error {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: userid, limit, role, offset, sortStr
func (_m *ProductService) GetAll(userid uint, limit uint, role string, offset uint, sortStr string) ([]product.Core, error) {
	ret := _m.Called(userid, limit, role, offset, sortStr)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string, uint, string) ([]product.Core, error)); ok {
		return rf(userid, limit, role, offset, sortStr)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string, uint, string) []product.Core); ok {
		r0 = rf(userid, limit, role, offset, sortStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string, uint, string) error); ok {
		r1 = rf(userid, limit, role, offset, sortStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: id, userid
func (_m *ProductService) GetProductById(id uint, userid uint) (*product.Core, error) {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 *product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*product.Core, error)); ok {
		return rf(id, userid)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *product.Core); ok {
		r0 = rf(id, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByName provides a mock function with given fields: userid, limit, role, offset, sortStr, name
func (_m *ProductService) GetProductByName(userid uint, limit uint, role string, offset uint, sortStr string, name string) ([]product.Core, error) {
	ret := _m.Called(userid, limit, role, offset, sortStr, name)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByName")
	}

	var r0 []product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string, uint, string, string) ([]product.Core, error)); ok {
		return rf(userid, limit, role, offset, sortStr, name)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string, uint, string, string) []product.Core); ok {
		r0 = rf(userid, limit, role, offset, sortStr, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string, uint, string, string) error); ok {
		r1 = rf(userid, limit, role, offset, sortStr, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, userid, input, file, handlerFilename
func (_m *ProductService) UpdateById(id uint, userid uint, input product.Core, file io.Reader, handlerFilename string) (string, error) {
	ret := _m.Called(id, userid, input, file, handlerFilename)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, product.Core, io.Reader, string) (string, error)); ok {
		return rf(id, userid, input, file, handlerFilename)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, product.Core, io.Reader, string) string); ok {
		r0 = rf(id, userid, input, file, handlerFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, product.Core, io.Reader, string) error); ok {
		r1 = rf(id, userid, input, file, handlerFilename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
