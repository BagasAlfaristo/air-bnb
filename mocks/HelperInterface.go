// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	clinic "PetPalApp/features/clinic"

	io "io"

	mock "github.com/stretchr/testify/mock"

	product "PetPalApp/features/product"
)

// HelperInterface is an autogenerated mock type for the HelperInterface type
type HelperInterface struct {
	mock.Mock
}

// ConvertToNullableString provides a mock function with given fields: value
func (_m *HelperInterface) ConvertToNullableString(value string) *string {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToNullableString")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// DereferenceString provides a mock function with given fields: s
func (_m *HelperInterface) DereferenceString(s *string) string {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for DereferenceString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*string) string); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SortClinicsByDistance provides a mock function with given fields: userid, clnics
func (_m *HelperInterface) SortClinicsByDistance(userid uint, clnics []clinic.Core) []clinic.Core {
	ret := _m.Called(userid, clnics)

	if len(ret) == 0 {
		panic("no return value specified for SortClinicsByDistance")
	}

	var r0 []clinic.Core
	if rf, ok := ret.Get(0).(func(uint, []clinic.Core) []clinic.Core); ok {
		r0 = rf(userid, clnics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clinic.Core)
		}
	}

	return r0
}

// SortProductsByDistance provides a mock function with given fields: iduser, products
func (_m *HelperInterface) SortProductsByDistance(iduser uint, products []product.Core) []product.Core {
	ret := _m.Called(iduser, products)

	if len(ret) == 0 {
		panic("no return value specified for SortProductsByDistance")
	}

	var r0 []product.Core
	if rf, ok := ret.Get(0).(func(uint, []product.Core) []product.Core); ok {
		r0 = rf(iduser, products)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	return r0
}

// UploadAdminPicture provides a mock function with given fields: file, fileName
func (_m *HelperInterface) UploadAdminPicture(file io.Reader, fileName string) (string, error) {
	ret := _m.Called(file, fileName)

	if len(ret) == 0 {
		panic("no return value specified for UploadAdminPicture")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, string) (string, error)); ok {
		return rf(file, fileName)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, string) string); ok {
		r0 = rf(file, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(io.Reader, string) error); ok {
		r1 = rf(file, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadDoctorPicture provides a mock function with given fields: file, fileName
func (_m *HelperInterface) UploadDoctorPicture(file io.Reader, fileName string) (string, error) {
	ret := _m.Called(file, fileName)

	if len(ret) == 0 {
		panic("no return value specified for UploadDoctorPicture")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, string) (string, error)); ok {
		return rf(file, fileName)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, string) string); ok {
		r0 = rf(file, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(io.Reader, string) error); ok {
		r1 = rf(file, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadProductPicture provides a mock function with given fields: file, fileName
func (_m *HelperInterface) UploadProductPicture(file io.Reader, fileName string) (string, error) {
	ret := _m.Called(file, fileName)

	if len(ret) == 0 {
		panic("no return value specified for UploadProductPicture")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, string) (string, error)); ok {
		return rf(file, fileName)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, string) string); ok {
		r0 = rf(file, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(io.Reader, string) error); ok {
		r1 = rf(file, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadProfilePicture provides a mock function with given fields: file, fileName
func (_m *HelperInterface) UploadProfilePicture(file io.Reader, fileName string) (string, error) {
	ret := _m.Called(file, fileName)

	if len(ret) == 0 {
		panic("no return value specified for UploadProfilePicture")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader, string) (string, error)); ok {
		return rf(file, fileName)
	}
	if rf, ok := ret.Get(0).(func(io.Reader, string) string); ok {
		r0 = rf(file, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(io.Reader, string) error); ok {
		r1 = rf(file, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHelperInterface creates a new instance of HelperInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHelperInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HelperInterface {
	mock := &HelperInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
