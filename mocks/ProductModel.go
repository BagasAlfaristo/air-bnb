// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	product "PetPalApp/features/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductModel is an autogenerated mock type for the ProductModel type
type ProductModel struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id, userid
func (_m *ProductModel) Delete(id uint, userid uint) error {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *ProductModel) Insert(input product.Core) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(product.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutById provides a mock function with given fields: id, userid, input
func (_m *ProductModel) PutById(id uint, userid uint, input product.Core) error {
	ret := _m.Called(id, userid, input)

	if len(ret) == 0 {
		panic("no return value specified for PutById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, product.Core) error); ok {
		r0 = rf(id, userid, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields: limit, offset, sortStr
func (_m *ProductModel) SelectAll(limit uint, offset uint, sortStr string) ([]product.Core, error) {
	ret := _m.Called(limit, offset, sortStr)

	if len(ret) == 0 {
		panic("no return value specified for SelectAll")
	}

	var r0 []product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) ([]product.Core, error)); ok {
		return rf(limit, offset, sortStr)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) []product.Core); ok {
		r0 = rf(limit, offset, sortStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(limit, offset, sortStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllAdmin provides a mock function with given fields: limit, userid, offset
func (_m *ProductModel) SelectAllAdmin(limit uint, userid uint, offset uint) ([]product.Core, error) {
	ret := _m.Called(limit, userid, offset)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllAdmin")
	}

	var r0 []product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) ([]product.Core, error)); ok {
		return rf(limit, userid, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint) []product.Core); ok {
		r0 = rf(limit, userid, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint) error); ok {
		r1 = rf(limit, userid, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllAdminByName provides a mock function with given fields: limit, userid, offset, name
func (_m *ProductModel) SelectAllAdminByName(limit uint, userid uint, offset uint, name string) ([]product.Core, error) {
	ret := _m.Called(limit, userid, offset, name)

	if len(ret) == 0 {
		panic("no return value specified for SelectAllAdminByName")
	}

	var r0 []product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint, string) ([]product.Core, error)); ok {
		return rf(limit, userid, offset, name)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, uint, string) []product.Core); ok {
		r0 = rf(limit, userid, offset, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, uint, string) error); ok {
		r1 = rf(limit, userid, offset, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: id
func (_m *ProductModel) SelectById(id uint) (*product.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectById")
	}

	var r0 *product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*product.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *product.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByIdAdmin provides a mock function with given fields: id, userid
func (_m *ProductModel) SelectByIdAdmin(id uint, userid uint) (*product.Core, error) {
	ret := _m.Called(id, userid)

	if len(ret) == 0 {
		panic("no return value specified for SelectByIdAdmin")
	}

	var r0 *product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*product.Core, error)); ok {
		return rf(id, userid)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *product.Core); ok {
		r0 = rf(id, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByName provides a mock function with given fields: limit, offset, name, sortStr
func (_m *ProductModel) SelectByName(limit uint, offset uint, name string, sortStr string) ([]product.Core, error) {
	ret := _m.Called(limit, offset, name, sortStr)

	if len(ret) == 0 {
		panic("no return value specified for SelectByName")
	}

	var r0 []product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string, string) ([]product.Core, error)); ok {
		return rf(limit, offset, name, sortStr)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string, string) []product.Core); ok {
		r0 = rf(limit, offset, name, sortStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string, string) error); ok {
		r1 = rf(limit, offset, name, sortStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerIsAdmin provides a mock function with given fields: userid
func (_m *ProductModel) VerIsAdmin(userid uint) (*product.Core, error) {
	ret := _m.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for VerIsAdmin")
	}

	var r0 *product.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*product.Core, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(uint) *product.Core); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductModel creates a new instance of ProductModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductModel {
	mock := &ProductModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
