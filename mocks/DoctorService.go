// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	availdaydoctor "PetPalApp/features/availdaydoctor"
	doctor "PetPalApp/features/doctor"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// DoctorService is an autogenerated mock type for the DoctorService type
type DoctorService struct {
	mock.Mock
}

// AddDoctor provides a mock function with given fields: core, file, handlerFilename
func (_m *DoctorService) AddDoctor(core doctor.Core, file io.Reader, handlerFilename string) (string, error) {
	ret := _m.Called(core, file, handlerFilename)

	if len(ret) == 0 {
		panic("no return value specified for AddDoctor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.Core, io.Reader, string) (string, error)); ok {
		return rf(core, file, handlerFilename)
	}
	if rf, ok := ret.Get(0).(func(doctor.Core, io.Reader, string) string); ok {
		r0 = rf(core, file, handlerFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(doctor.Core, io.Reader, string) error); ok {
		r1 = rf(core, file, handlerFilename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: adminID
func (_m *DoctorService) Delete(adminID uint) error {
	ret := _m.Called(adminID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(adminID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailDoctorByIdDoctor provides a mock function with given fields: doctorID
func (_m *DoctorService) GetAvailDoctorByIdDoctor(doctorID uint) (*availdaydoctor.Core, error) {
	ret := _m.Called(doctorID)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailDoctorByIdDoctor")
	}

	var r0 *availdaydoctor.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*availdaydoctor.Core, error)); ok {
		return rf(doctorID)
	}
	if rf, ok := ret.Get(0).(func(uint) *availdaydoctor.Core); ok {
		r0 = rf(doctorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*availdaydoctor.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(doctorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctorByIdAdmin provides a mock function with given fields: adminID
func (_m *DoctorService) GetDoctorByIdAdmin(adminID uint) (*doctor.Core, error) {
	ret := _m.Called(adminID)

	if len(ret) == 0 {
		panic("no return value specified for GetDoctorByIdAdmin")
	}

	var r0 *doctor.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*doctor.Core, error)); ok {
		return rf(adminID)
	}
	if rf, ok := ret.Get(0).(func(uint) *doctor.Core); ok {
		r0 = rf(adminID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByIdAdmin provides a mock function with given fields: AdminId, input, file, handlerFilename
func (_m *DoctorService) UpdateByIdAdmin(AdminId uint, input doctor.Core, file io.Reader, handlerFilename string) (string, error) {
	ret := _m.Called(AdminId, input, file, handlerFilename)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByIdAdmin")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, doctor.Core, io.Reader, string) (string, error)); ok {
		return rf(AdminId, input, file, handlerFilename)
	}
	if rf, ok := ret.Get(0).(func(uint, doctor.Core, io.Reader, string) string); ok {
		r0 = rf(AdminId, input, file, handlerFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, doctor.Core, io.Reader, string) error); ok {
		r1 = rf(AdminId, input, file, handlerFilename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDoctorService creates a new instance of DoctorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDoctorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *DoctorService {
	mock := &DoctorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
