// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	admin "PetPalApp/features/admin"

	mock "github.com/stretchr/testify/mock"
)

// AdminModel is an autogenerated mock type for the AdminModel type
type AdminModel struct {
	mock.Mock
}

// AdminByEmail provides a mock function with given fields: email
func (_m *AdminModel) AdminByEmail(email string) (*admin.Core, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for AdminByEmail")
	}

	var r0 *admin.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*admin.Core, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *admin.Core); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminById provides a mock function with given fields: adminid
func (_m *AdminModel) AdminById(adminid uint) (*admin.Core, error) {
	ret := _m.Called(adminid)

	if len(ret) == 0 {
		panic("no return value specified for AdminById")
	}

	var r0 *admin.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*admin.Core, error)); ok {
		return rf(adminid)
	}
	if rf, ok := ret.Get(0).(func(uint) *admin.Core); ok {
		r0 = rf(adminid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(adminid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: adminid
func (_m *AdminModel) Delete(adminid uint) error {
	ret := _m.Called(adminid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(adminid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: _a0
func (_m *AdminModel) Register(_a0 admin.Core) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(admin.Core) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllAdmin provides a mock function with given fields:
func (_m *AdminModel) SelectAllAdmin() ([]admin.Core, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectAllAdmin")
	}

	var r0 []admin.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]admin.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []admin.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllAdminWithCoor provides a mock function with given fields:
func (_m *AdminModel) SelectAllAdminWithCoor() ([]admin.Core, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectAllAdminWithCoor")
	}

	var r0 []admin.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]admin.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []admin.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: adminid, updateData
func (_m *AdminModel) Update(adminid uint, updateData admin.Core) error {
	ret := _m.Called(adminid, updateData)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, admin.Core) error); ok {
		r0 = rf(adminid, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdminModel creates a new instance of AdminModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminModel {
	mock := &AdminModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
