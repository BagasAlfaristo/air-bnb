// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	admin "PetPalApp/features/admin"
	clinic "PetPalApp/features/clinic"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: adminid
func (_m *AdminService) Delete(adminid uint) error {
	ret := _m.Called(adminid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(adminid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllClinic provides a mock function with given fields: userid, offset, sortStr
func (_m *AdminService) GetAllClinic(userid uint, offset uint, sortStr string) ([]clinic.Core, error) {
	ret := _m.Called(userid, offset, sortStr)

	if len(ret) == 0 {
		panic("no return value specified for GetAllClinic")
	}

	var r0 []clinic.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) ([]clinic.Core, error)); ok {
		return rf(userid, offset, sortStr)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) []clinic.Core); ok {
		r0 = rf(userid, offset, sortStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clinic.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(userid, offset, sortStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClinic provides a mock function with given fields: id
func (_m *AdminService) GetClinic(id uint) (clinic.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetClinic")
	}

	var r0 clinic.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (clinic.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) clinic.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(clinic.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: adminid
func (_m *AdminService) GetProfile(adminid uint) (*admin.Core, error) {
	ret := _m.Called(adminid)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *admin.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*admin.Core, error)); ok {
		return rf(adminid)
	}
	if rf, ok := ret.Get(0).(func(uint) *admin.Core); ok {
		r0 = rf(adminid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(adminid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *AdminService) Login(email string, password string) (*admin.Core, string, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *admin.Core
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (*admin.Core, string, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *admin.Core); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: _a0
func (_m *AdminService) Register(_a0 admin.Core) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(admin.Core) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: adminid, updateData, file, handlerFilename
func (_m *AdminService) Update(adminid uint, updateData admin.Core, file io.Reader, handlerFilename string) error {
	ret := _m.Called(adminid, updateData, file, handlerFilename)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, admin.Core, io.Reader, string) error); ok {
		r0 = rf(adminid, updateData, file, handlerFilename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminService {
	mock := &AdminService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
