// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	availdaydoctor "PetPalApp/features/availdaydoctor"
	doctor "PetPalApp/features/doctor"

	mock "github.com/stretchr/testify/mock"

	servicedoctor "PetPalApp/features/servicedoctor"
)

// DoctorModel is an autogenerated mock type for the DoctorModel type
type DoctorModel struct {
	mock.Mock
}

// AddDoctor provides a mock function with given fields: _a0
func (_m *DoctorModel) AddDoctor(_a0 doctor.Core) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddDoctor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(doctor.Core) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: adminID
func (_m *DoctorModel) Delete(adminID uint) error {
	ret := _m.Called(adminID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(adminID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutByIdAdmin provides a mock function with given fields: AdminID, input
func (_m *DoctorModel) PutByIdAdmin(AdminID uint, input doctor.Core) error {
	ret := _m.Called(AdminID, input)

	if len(ret) == 0 {
		panic("no return value specified for PutByIdAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, doctor.Core) error); ok {
		r0 = rf(AdminID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAllDoctor provides a mock function with given fields:
func (_m *DoctorModel) SelectAllDoctor() ([]doctor.Core, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectAllDoctor")
	}

	var r0 []doctor.Core
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]doctor.Core, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []doctor.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.Core)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAvailDayById provides a mock function with given fields: id
func (_m *DoctorModel) SelectAvailDayById(id uint) (*availdaydoctor.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectAvailDayById")
	}

	var r0 *availdaydoctor.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*availdaydoctor.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *availdaydoctor.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*availdaydoctor.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByAdminId provides a mock function with given fields: id
func (_m *DoctorModel) SelectByAdminId(id uint) (*doctor.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectByAdminId")
	}

	var r0 *doctor.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*doctor.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *doctor.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectDoctorById provides a mock function with given fields: id
func (_m *DoctorModel) SelectDoctorById(id uint) (*doctor.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectDoctorById")
	}

	var r0 *doctor.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*doctor.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *doctor.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectServiceById provides a mock function with given fields: id
func (_m *DoctorModel) SelectServiceById(id uint) (*servicedoctor.Core, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectServiceById")
	}

	var r0 *servicedoctor.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*servicedoctor.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *servicedoctor.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedoctor.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDoctorModel creates a new instance of DoctorModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDoctorModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *DoctorModel {
	mock := &DoctorModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
